<?php

namespace Ailixter\Puzzle;

use PHPUnit\Framework\TestCase;
use Ailixter\Gears\Exceptions\MethodException;
use Psr\Container\ContainerInterface;
use Psr\Container\ContainerExceptionInterface;
use Psr\Container\NotFoundExceptionInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-01-17 at 11:25:45.
 */
class ApplicationTest extends TestCase
{

    /**
     * @var Application
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Application;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     */
    public function testAddThenGet()
    {
        $this->object->add('test', new \stdClass());
        self::assertInstanceOf('\stdClass', $this->object->test);
    }

    public function testSetThenGet()
    {
        $this->object->test = new \stdClass();
        self::assertInstanceOf('\stdClass', $this->object->test);
    }

    public function test__isset()
    {
        $this->object->add('test', new \stdClass());
        self::assertTrue(isset($this->object->test));
        self::assertFalse(isset($this->object->unknown));
    }

    /**
     */
    public function testGetCallable()
    {
        $this->object->add('test', function () { return new \stdClass(); });
        self::assertInstanceOf('\stdClass', $this->object->test);
    }

    /**
     */
    public function testGetCallableWithContainer()
    {
        $this->object->add('\stdClass', new \stdClass());
        $this->object->add('test', function (ContainerInterface $c) {
            return $c->get('\stdClass');
        });
        self::assertInstanceOf('\stdClass', $this->object->test);
    }

    /**
     * @expectedException \Psr\Container\NotFoundExceptionInterface
     */
    public function testGetNotFound()
    {
        $this->object->get->unknown;
    }

    /**
     * @expectedException \Psr\Container\NotFoundExceptionInterface
     */
    public function testCallNotFound()
    {
        $this->object->get->unknown();
    }

    /**
     */
    public function testGetFunctional()
    {
        $this->object->add('test', function () { return function () { return new \stdClass(); };});
        self::assertInstanceOf('\stdClass', $this->object->test());
    }

    public function testGetFunctional2()
    {
        $this->object->add('test', function () { return function () { return new \stdClass(); };});
        $test = $this->object->test;
        self::assertInstanceOf('\Closure', $test);
        self::assertInstanceOf('\stdClass', $test());
    }

    /**
     * @expectedException \Ailixter\Gears\Exceptions\MethodException
     */
    public function testGetNotFunctional()
    {
        $this->object->add('test', new \stdClass());
        $this->object->test();
    }

}
