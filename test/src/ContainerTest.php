<?php

namespace Ailixter\Puzzle;

use PHPUnit_Framework_TestCase;
use Psr\Container\ContainerInterface;
use stdClass;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-01-17 at 11:25:45.
 */
class ContainerTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Container
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Container;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     */
    public function testAddThenGet()
    {
        $this->object->add('test', new stdClass());
        self::assertInstanceOf('stdClass', $this->object->get('test'));
    }

    /**
     */
    public function testGetCallable()
    {
        $this->object->add('test', function () { return new stdClass(); });
        self::assertInstanceOf('stdClass', $this->object->get('test'));
    }

    /**
     */
    public function testGetCallableWithContainer()
    {
        $this->object->add('stdClass', new stdClass());
        $this->object->add('test', function (ContainerInterface $c) {
            return $c->get('stdClass');
        });
        self::assertInstanceOf('stdClass', $this->object->get('test'));
    }

    /**
     */
    public function testGetCallableWithParams()
    {
        $this->object->add('stdClass', new stdClass());
        $this->object->add('test', function (ContainerInterface $c, $id) {
            return $c->get($id);
        });
        self::assertInstanceOf('stdClass', $this->object->get('test', 'stdClass'));
    }

    /**
     * @expectedException \Ailixter\Puzzle\Container\NotFoundException
     */
    public function testGetNotFound()
    {
        $this->object->get('test');
    }

    /**
     */
    public function testHas()
    {
        $this->object->add('test', new stdClass());
        self::assertTrue($this->object->has('test'), 'for test');
        self::assertFalse($this->object->has('stdClass'), 'for stdClass');
    }

}
